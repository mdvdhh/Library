-- WizardUILib (source.lua) -- Full-featured, Wizard-style UI library for Roblox (drop-in via loadstring) -- Usage: local Wizard = loadstring(game:HttpGet("URL"))() -- Then: local Window = Wizard:CreateWindow({Title = "Wizard UI", Size = UDim2.fromOffset(600,350)})

local TweenService = game:GetService("TweenService") local RunService = game:GetService("RunService") local UserInputService = game:GetService("UserInputService") local Players = game:GetService("Players") local LocalPlayer = Players.LocalPlayer local StarterGui = game:GetService("StarterGui")

local Library = {} Library.__index = Library

-- Default theme (wizard blue-purple) local Theme = { Accent = Color3.fromRGB(88, 101, 242), -- wizard blue AccentDark = Color3.fromRGB(59, 66, 160), Background = Color3.fromRGB(20, 20, 30), Card = Color3.fromRGB(30, 30, 40), Text = Color3.fromRGB(230, 230, 235), Muted = Color3.fromRGB(160,160,170) }

-- Utilities local function new(class, props) local obj = Instance.new(class) if props then for k,v in pairs(props) do if k == "Parent" then obj.Parent = v else pcall(function() obj[k] = v end) end end end return obj end

local function tween(instance, props, time, style, dir) local info = TweenInfo.new(time or 0.2, style or Enum.EasingStyle.Sine, dir or Enum.EasingDirection.Out) local t = TweenService:Create(instance, info, props) t:Play() return t end

local function round(num) return math.floor(num + 0.5) end

-- Basic component factory for consistent text label local function makeLabel(parent, text, size, pos, font, color) local l = new("TextLabel", { Parent = parent, Text = text or "", Size = size or UDim2.new(1,0,0,18), Position = pos or UDim2.new(0,0,0,0), BackgroundTransparency = 1, TextColor3 = color or Theme.Text, Font = font or Enum.Font.GothamSemibold, TextSize = 14, TextXAlignment = Enum.TextXAlignment.Left }) return l end

-- Notification system local Notifications = {} function Library.Notify(opts) opts = opts or {} local title = opts.Title or "Notification" local text = opts.Text or "" local dur = opts.Duration or 4

local screen = Players.LocalPlayer:WaitForChild("PlayerGui")
local gui = screen:FindFirstChild("WizardNotifications")
if not gui then
    gui = new("ScreenGui", {Parent = screen, Name = "WizardNotifications", ResetOnSpawn = false})
end

local frame = new("Frame", {
    Parent = gui,
    Size = UDim2.new(0, 300, 0, 70),
    AnchorPoint = Vector2.new(1,0),
    Position = UDim2.new(1, -12, 0, 12),
    BackgroundTransparency = 1,
})

local container = new("Frame", {Parent = frame, Size = UDim2.new(1,0,1,0), BackgroundColor3 = Theme.Card, BorderSizePixel = 0})
local uic = new("UICorner", {Parent = container, CornerRadius = UDim.new(0,8)})
container.ClipsDescendants = true

local tlabel = makeLabel(container, title, UDim2.new(1,-12,0,18), UDim2.new(0,0,0,8))
tlabel.TextXAlignment = Enum.TextXAlignment.Left
tlabel.Font = Enum.Font.GothamBold
tlabel.TextSize = 15

local dlabel = makeLabel(container, text, UDim2.new(1,-12,0,36), UDim2.new(0,8,0,26), Enum.Font.Gotham)
dlabel.TextWrapped = true
dlabel.TextTransparency = 0
dlabel.TextSize = 13

container.Position = UDim2.new(1, 320, 0, 12)
tween(container, {Position = UDim2.new(1, -312, 0, 12)}, 0.35)

spawn(function()
    wait(dur)
    tween(container, {Position = UDim2.new(1, 320, 0, 12)}, 0.3)
    wait(0.35)
    pcall(function() frame:Destroy() end)
end)

end

-- Window creation function Library:CreateWindow(opts) opts = opts or {} local Title = opts.Title or "Wizard UI" local Size = opts.Size or UDim2.fromOffset(600, 350)

local screen = Players.LocalPlayer:WaitForChild("PlayerGui")
local mainGui = new("ScreenGui", {Parent = screen, Name = "WizardUILib", ResetOnSpawn = false})

local root = new("Frame", {
    Parent = mainGui,
    Size = Size,
    Position = UDim2.new(0.5, -Size.X.Offset/2, 0.5, -Size.Y.Offset/2),
    AnchorPoint = Vector2.new(0.5,0.5),
    BackgroundColor3 = Theme.Background,
    BorderSizePixel = 0
})
new("UICorner", {Parent = root, CornerRadius = UDim.new(0,12)})

-- Top bar
local top = new("Frame", {Parent = root, Size = UDim2.new(1,0,0,36), BackgroundTransparency = 1})
local title = makeLabel(top, Title, UDim2.new(1, -36, 1, 0), UDim2.new(0, 12, 0, 0), Enum.Font.GothamBold)
title.TextSize = 16

-- Close button
local closeBtn = new("ImageButton", {Parent = top, Size = UDim2.new(0,28,0,28), Position = UDim2.new(1,-36,0,4), BackgroundTransparency = 1, Image = "rbxassetid://3926307904", ImageRectOffset = Vector2.new(84,4), ImageRectSize = Vector2.new(36,36)})
closeBtn.AutoButtonColor = false
closeBtn.MouseButton1Click:Connect(function()
    tween(root, {Size = UDim2.new(0,0,0,0), Position = root.Position + UDim2.new(0,0,0,0)}, 0.25)
    wait(0.25)
    pcall(function() mainGui:Destroy() end)
end)

-- Layout: left tabs, right content
local left = new("Frame", {Parent = root, Size = UDim2.new(0,170,1,-36), Position = UDim2.new(0,0,0,36), BackgroundColor3 = Theme.Card})
new("UICorner", {Parent = left, CornerRadius = UDim.new(0,10)})
local leftList = new("UIListLayout", {Parent = left, Padding = UDim.new(0,6), SortOrder = Enum.SortOrder.LayoutOrder})
leftList.Padding = UDim.new(0,8)

local right = new("Frame", {Parent = root, Size = UDim2.new(1,-170,1,-36), Position = UDim2.new(0,170,0,36), BackgroundColor3 = Theme.Background})
new("UICorner", {Parent = right, CornerRadius = UDim.new(0,10)})

local tabsFolder = Instance.new("Folder", root)
tabsFolder.Name = "Tabs"

local window = {
    Root = root,
    Left = left,
    Right = right,
    Tabs = {},
    TabsFolder = tabsFolder,
    Theme = Theme,
}

function window:CreateTab(name)
    local tbtn = new("TextButton", {Parent = left, Text = name, Size = UDim2.new(1, -16, 0, 36), BackgroundTransparency = 1, TextColor3 = Theme.Text, Font = Enum.Font.GothamSemibold, TextSize = 14})
    tbtn.AutoButtonColor = false

    local content = new("Frame", {Parent = right, Size = UDim2.new(1,0,1,0), BackgroundTransparency = 1})
    content.Visible = false

    local scroll = new("ScrollingFrame", {Parent = content, Size = UDim2.new(1,0,1,0), CanvasSize = UDim2.new(0,0,0,0), BackgroundTransparency = 1, ScrollBarThickness = 6})
    local layout = new("UIListLayout", {Parent = scroll, SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0,8)})
    layout.HorizontalAlignment = Enum.HorizontalAlignment.Left
    local padding = Instance.new("UIPadding", scroll)
    padding.PaddingLeft = UDim.new(0,12)
    padding.PaddingTop = UDim.new(0,12)

    local tab = {Button = tbtn, Content = content, Scroll = scroll, Layout = layout, Name = name}
    table.insert(window.Tabs, tab)

    -- Activate on click
    tbtn.MouseButton1Click:Connect(function()
        for _,tt in pairs(window.Tabs) do
            tt.Content.Visible = false
            tt.Button.TextColor3 = Theme.Muted
            tt.Button.BackgroundTransparency = 1
        end
        tab.Content.Visible = true
        tab.Button.TextColor3 = Theme.Text
        tween(tab.Button, {TextTransparency = 0}, 0.15)
        -- adjust canvas size
        wait(0.05)
        scroll.CanvasSize = UDim2.new(0,0,0, tab.Layout.AbsoluteContentSize.Y + 24)
    end)

    -- if first tab, click it
    if #window.Tabs == 1 then
        tbtn:EmitSignal("MouseButton1Click")
        -- fallback activate
        wait(0.05)
        tbtn.MouseButton1Click:Wait()
    end

    -- Provide methods
    function tab:Button(opts)
        opts = opts or {}
        local container = new("Frame", {Parent = scroll, Size = UDim2.new(1,-24,0,36), BackgroundColor3 = Theme.Card, BorderSizePixel = 0})
        new("UICorner", {Parent = container, CornerRadius = UDim.new(0,8)})
        local label = makeLabel(container, opts.Title or "Button", UDim2.new(1,-12,1,0), UDim2.new(0,12,0,0))
        label.Font = Enum.Font.GothamSemibold
        label.TextSize = 14
        local btn = new("TextButton", {Parent = container, Size = UDim2.new(0,96,0,28), Position = UDim2.new(1,-108,0,4), AnchorPoint = Vector2.new(0,0), BackgroundColor3 = Theme.Accent, Text = opts.ButtonText or "Run", TextColor3 = Theme.Text, Font = Enum.Font.GothamBold, TextSize = 13})
        new("UICorner", {Parent = btn, CornerRadius = UDim.new(0,6)})
        btn.MouseButton1Click:Connect(function()
            pcall(opts.Callback)
        end)
        scroll.CanvasSize = UDim2.new(0,0,0, layout.AbsoluteContentSize.Y + 24)
        return container
    end

    function tab:Toggle(opts)
        opts = opts or {}
        local default = opts.Default or false
        local container = new("Frame", {Parent = scroll, Size = UDim2.new(1,-24,0,36), BackgroundColor3 = Theme.Card, BorderSizePixel = 0})
        new("UICorner", {Parent = container, CornerRadius = UDim.new(0,8)})
        local label = makeLabel(container, opts.Title or "Toggle", UDim2.new(1,-12,1,0), UDim2.new(0,12,0,0))
        label.Font = Enum.Font.GothamSemibold
        label.TextSize = 14
        local toggleBg = new("Frame", {Parent = container, Size = UDim2.new(0,42,0,22), Position = UDim2.new(1,-54,0,7), BackgroundColor3 = Theme.Background, BorderSizePixel = 0})
        new("UICorner", {Parent = toggleBg, CornerRadius = UDim.new(0,12)})
        local dot = new("Frame", {Parent = toggleBg, Size = UDim2.new(0,18,0,18), Position = UDim2.new(default and 1 or 0, default and -20 or 4, 0,2), BackgroundColor3 = default and Theme.Accent or Theme.Card})
        new("UICorner", {Parent = dot, CornerRadius = UDim.new(0,10)})

        local state = default
        local function setState(v, trigger)
            state = v
            if v then
                tween(dot, {Position = UDim2.new(1, -20, 0, 2), BackgroundColor3 = Theme.Accent}, 0.18)
            else
                tween(dot, {Position = UDim2.new(0, 4, 0, 2), BackgroundColor3 = Theme.Card}, 0.18)
            end
            if trigger and opts.Callback then pcall(opts.Callback, state) end
        end

        toggleBg.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                setState(not state, true)
            end
        end)
        setState(default, false)
        scroll.CanvasSize = UDim2.new(0,0,0, layout.AbsoluteContentSize.Y + 24)
        return container
    end

    function tab:Slider(opts)
        opts = opts or {}
        local min = opts.Min or 0
        local max = opts.Max or 100
        local default = opts.Default or min
        local container = new("Frame", {Parent = scroll, Size = UDim2.new(1,-24,0,66), BackgroundColor3 = Theme.Card, BorderSizePixel = 0})
        new("UICorner", {Parent = container, CornerRadius = UDim.new(0,8)})
        local label = makeLabel(container, opts.Title or "Slider", UDim2.new(1,-12,0,22), UDim2.new(0,12,0,6))
        label.Font = Enum.Font.GothamSemibold
        label.TextSize = 14

        local track = new("Frame", {Parent = container, Size = UDim2.new(1,-24,0,10), Position = UDim2.new(0,12,0,36), BackgroundColor3 = Theme.Background, BorderSizePixel = 0})
        new("UICorner", {Parent = track, CornerRadius = UDim.new(0,6)})
        local handle = new("Frame", {Parent = track, Size = UDim2.new(0,12,1,0), Position = UDim2.new(0, ((default - min)/(max-min))*(1-0.06), 0,0), BackgroundColor3 = Theme.Accent})
        new("UICorner", {Parent = handle, CornerRadius = UDim.new(0,6)})
        local dragging = false

        local function setFromX(x)
            local rel = math.clamp((x - track.AbsolutePosition.X) / track.AbsoluteSize.X, 0, 1)
            handle.Position = UDim2.new(rel, 0, 0, 0)
            local val = min + rel*(max-min)
            val = math.floor(val + 0.5)
            if opts.Callback then pcall(opts.Callback, val) end
        end

        handle.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = true
            end
        end)
        handle.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = false
            end
        end)
        UserInputService.InputChanged:Connect(function(input)
            if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                setFromX(input.Position.X)
            end
        end)
        track.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                setFromX(input.Position.X)
            end
        end)

        scroll.CanvasSize = UDim2.new(0,0,0, layout.AbsoluteContentSize.Y + 24)
        return container
    end

    function tab:Dropdown(opts)
        opts = opts or {}
        local list = opts.List or {}
        local default = opts.Default or list[1]
        local container = new("Frame", {Parent = scroll, Size = UDim2.new(1,-24,0,36), BackgroundColor3 = Theme.Card, BorderSizePixel = 0})
        new("UICorner", {Parent = container, CornerRadius = UDim.new(0,8)})
        local label = makeLabel(container, opts.Title or "Dropdown", UDim2.new(1,-12,1,0), UDim2.new(0,12,0,0))
        label.Font = Enum.Font.GothamSemibold
        label.TextSize = 14

        local selectBtn = new("TextButton", {Parent = container, Size = UDim2.new(0,160,0,28), Position = UDim2.new(1,-172,0,4), Text = tostring(default or "Select"), BackgroundColor3 = Theme.Background, TextColor3 = Theme.Text, Font = Enum.Font.Gotham, TextSize = 13})
        new("UICorner", {Parent = selectBtn, CornerRadius = UDim.new(0,6)})

        local optionsFrame = new("Frame", {Parent = container, Size = UDim2.new(0,160,0,#list*30), Position = UDim2.new(1,-172,0,32), BackgroundColor3 = Theme.Card, Visible = false})
        new("UICorner", {Parent = optionsFrame, CornerRadius = UDim.new(0,6)})

        for i, v in ipairs(list) do
            local opt = new("TextButton", {Parent = optionsFrame, Size = UDim2.new(1,0,0,30), Position = UDim2.new(0,0,0,(i-1)*30), Text = tostring(v), BackgroundTransparency = 1, TextColor3 = Theme.Text, Font = Enum.Font.Gotham})
            opt.MouseButton1Click:Connect(function()
                selectBtn.Text = tostring(v)
                optionsFrame.Visible = false
                if opts.Callback then pcall(opts.Callback, v) end
            end)
        end

        selectBtn.MouseButton1Click:Connect(function()
            optionsFrame.Visible = not optionsFrame.Visible
        end)

        scroll.CanvasSize = UDim2.new(0,0,0, layout.AbsoluteContentSize.Y + 24)
        return container
    end

    function tab:Textbox(opts)
        opts = opts or {}
        local container = new("Frame", {Parent = scroll, Size = UDim2.new(1,-24,0,48), BackgroundColor3 = Theme.Card, BorderSizePixel = 0})
        new("UICorner", {Parent = container, CornerRadius = UDim.new(0,8)})
        local label = makeLabel(container, opts.Title or "Text", UDim2.new(1,-12,0,20), UDim2.new(0,12,0,4))
        label.Font = Enum.Font.GothamSemibold
        label.TextSize = 14
        local box = new("TextBox", {Parent = container, Size = UDim2.new(1,-24,0,24), Position = UDim2.new(0,12,0,22), BackgroundColor3 = Theme.Background, Text = tostring(opts.Default or ""), TextColor3 = Theme.Text, Font = Enum.Font.Gotham, TextSize = 13})
        new("UICorner", {Parent = box, CornerRadius = UDim.new(0,6)})
        box.FocusLost:Connect(function(enter)
            if enter and opts.Callback then pcall(opts.Callback, box.Text) end
        end)
        scroll.CanvasSize = UDim2.new(0,0,0, layout.AbsoluteContentSize.Y + 24)
        return container
    end

    function tab:ColorPicker(opts)
        opts = opts or {}
        local default = opts.Default or Theme.Accent
        local container = new("Frame", {Parent = scroll, Size = UDim2.new(1,-24,0,36), BackgroundColor3 = Theme.Card, BorderSizePixel = 0})
        new("UICorner", {Parent = container, CornerRadius = UDim.new(0,8)})
        local label = makeLabel(container, opts.Title or "Color", UDim2.new(1,-12,1,0), UDim2.new(0,12,0,0))
        label.Font = Enum.Font.GothamSemibold
        label.TextSize = 14

        local preview = new("Frame", {Parent = container, Size = UDim2.new(0,28,0,28), Position = UDim2.new(1,-44,0,4), BackgroundColor3 = default})
        new("UICorner", {Parent = preview, CornerRadius = UDim.new(0,6)})

        local picker = new("TextButton", {Parent = container, Size = UDim2.new(0,96,0,28), Position = UDim2.new(1,-144,0,4), Text = "Pick", BackgroundColor3 = Theme.Background, TextColor3 = Theme.Text})
        new("UICorner", {Parent = picker, CornerRadius = UDim.new(0,6)})

        local open = false
        local framePicker
        local function openPicker()
            if open then return end
            open = true
            framePicker = new("Frame", {Parent = Players.LocalPlayer:WaitForChild("PlayerGui"), Size = UDim2.new(0,300,0,220), Position = UDim2.new(0.5,-150,0.5,-110), BackgroundColor3 = Theme.Card})
            new("UICorner", {Parent = framePicker, CornerRadius = UDim.new(0,8)})
            local hue = new("ImageLabel", {Parent = framePicker, Size = UDim2.new(0,220,0,180), Position = UDim2.new(0,8,0,12), BackgroundTransparency = 1, Image = "rbxassetid://4155801257"})
            -- Simplified: user can input RGB sliders instead
            local rS = new("TextBox", {Parent = framePicker, Size = UDim2.new(0,64,0,28), Position = UDim2.new(0,236,0,20), Text = tostring(math.floor(default.R*255)), BackgroundColor3 = Theme.Background, TextColor3 = Theme.Text})
            local gS = new("TextBox", {Parent = framePicker, Size = UDim2.new(0,64,0,28), Position = UDim2.new(0,236,0,60), Text = tostring(math.floor(default.G*255)), BackgroundColor3 = Theme.Background, TextColor3 = Theme.Text})
            local bS = new("TextBox", {Parent = framePicker, Size = UDim2.new(0,64,0,28), Position = UDim2.new(0,236,0,100), Text = tostring(math.floor(default.B*255)), BackgroundColor3 = Theme.Background, TextColor3 = Theme.Text})
            local apply = new("TextButton", {Parent = framePicker, Size = UDim2.new(0,64,0,28), Position = UDim2.new(0,236,0,160), Text = "OK", BackgroundColor3 = Theme.Accent, TextColor3 = Theme.Text})

            local function parseAndApply()
                local r = tonumber(rS.Text) or 0
                local g = tonumber(gS.Text) or 0
                local b = tonumber(bS.Text) or 0
                r = math.clamp(r,0,255); g = math.clamp(g,0,255); b = math.clamp(b,0,255)
                local c = Color3.fromRGB(r,g,b)
                preview.BackgroundColor3 = c
                if opts.Callback then pcall(opts.Callback, c) end
            end
            apply.MouseButton1Click:Connect(function()
                parseAndApply()
                pcall(function() framePicker:Destroy() end)
                open = false
            end)
        end

        picker.MouseButton1Click:Connect(openPicker)
        scroll.CanvasSize = UDim2.new(0,0,0, layout.AbsoluteContentSize.Y + 24)
        return container
    end

    function tab:Notification(opts)
        return Library.Notify(opts)
    end

    return tab
end

setmetatable(window, {__index = Library})
return window

end

return Library

