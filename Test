--// FunUI Library by idcgj36

local FunUI = {}
FunUI.__index = FunUI

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

-- Utility
local function MakeDraggable(frame)
	local dragToggle, dragStart, startPos

	frame.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			dragToggle = true
			dragStart = input.Position
			startPos = frame.Position
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragToggle = false
				end
			end)
		end
	end)

	UserInputService.InputChanged:Connect(function(input)
		if dragToggle and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
			local delta = input.Position - dragStart
			frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
		end
	end)
end

-- Window Creation
function FunUI:CreateWindow(config)
	config = config or {}

	local ScreenGui = Instance.new("ScreenGui")
	ScreenGui.Name = "FunUI"
	ScreenGui.ResetOnSpawn = false
	ScreenGui.Parent = game:GetService("CoreGui")

	local Main = Instance.new("Frame")
	Main.Name = "Main"
	Main.Size = config.Size or UDim2.fromOffset(580, 460)
	Main.Position = UDim2.fromScale(0.5, 0.5)
	Main.AnchorPoint = Vector2.new(0.5, 0.5)
	Main.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
	Main.BackgroundTransparency = config.BackgroundImageTransparency or 0.42
	Main.Active = true
	Main.Parent = ScreenGui

	local Corner = Instance.new("UICorner", Main)
	Corner.CornerRadius = UDim.new(0, 15)

	local Title = Instance.new("TextLabel")
	Title.Name = "Title"
	Title.Parent = Main
	Title.Size = UDim2.new(1, 0, 0, 40)
	Title.BackgroundTransparency = 1
	Title.Text = config.Title or "CHed Hub Universal"
	Title.TextColor3 = Color3.fromRGB(255, 255, 255)
	Title.Font = Enum.Font.GothamBold
	Title.TextSize = 18

	MakeDraggable(Main)

	local TabsHolder = Instance.new("Frame", Main)
	TabsHolder.Size = UDim2.new(0, 150, 1, -40)
	TabsHolder.Position = UDim2.new(0, 0, 0, 40)
	TabsHolder.BackgroundColor3 = Color3.fromRGB(35, 35, 35)

	local TabButtons = Instance.new("UIListLayout", TabsHolder)
	TabButtons.SortOrder = Enum.SortOrder.LayoutOrder

	local PagesHolder = Instance.new("Frame", Main)
	PagesHolder.Size = UDim2.new(1, -150, 1, -40)
	PagesHolder.Position = UDim2.new(0, 150, 0, 40)
	PagesHolder.BackgroundTransparency = 1

	local Window = {}
	Window.Tabs = {}
	Window.ScreenGui = ScreenGui
	Window.Main = Main
	Window.PagesHolder = PagesHolder

	function Window:EditToggleButton(opt)
		local Button = Instance.new("ImageButton", ScreenGui)
		Button.Name = "ToggleButton"
		Button.Size = UDim2.fromOffset(50, 50)
		Button.Position = UDim2.new(0, 20, 0.5, 0)
		Button.AnchorPoint = Vector2.new(0, 0.5)
		Button.Image = opt.Icon or "rbxassetid://0"

		local corner = Instance.new("UICorner", Button)
		corner.CornerRadius = opt.CornerRadius or UDim.new(0, 25)

		local stroke = Instance.new("UIStroke", Button)
		stroke.Thickness = opt.StrokeThickness or 2
		stroke.Color = Color3.fromRGB(255, 255, 255)

		Button.MouseButton1Click:Connect(function()
			Main.Visible = not Main.Visible
		end)

		if opt.Draggable then
			MakeDraggable(Button)
		end
	end

	function Window:Tab(cfg)
		local TabButton = Instance.new("TextButton", TabsHolder)
		TabButton.Size = UDim2.new(1, 0, 0, 35)
		TabButton.BackgroundTransparency = 1
		TabButton.Text = cfg.Title or "Tab"
		TabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
		TabButton.Font = Enum.Font.Gotham
		TabButton.TextSize = 16

		local Page = Instance.new("ScrollingFrame", PagesHolder)
		Page.Size = UDim2.new(1, 0, 1, 0)
		Page.BackgroundTransparency = 1
		Page.Visible = false
		Page.CanvasSize = UDim2.new(0, 0, 0, 0)

		local Layout = Instance.new("UIListLayout", Page)
		Layout.Padding = UDim.new(0, 8)

		local Tab = {}
		function Tab:Show()
			for _, v in ipairs(PagesHolder:GetChildren()) do
				if v:IsA("ScrollingFrame") then v.Visible = false end
			end
			Page.Visible = true
		end

		function Tab:Divider()
			local Divider = Instance.new("Frame", Page)
			Divider.Size = UDim2.new(1, 0, 0, 2)
			Divider.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
		end

		function Tab:Button(data)
			local Button = Instance.new("TextButton", Page)
			Button.Size = UDim2.new(1, -10, 0, 35)
			Button.Text = data.Title or "Button"
			Button.Font = Enum.Font.GothamBold
			Button.TextSize = 16
			Button.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
			Button.TextColor3 = Color3.fromRGB(255, 255, 255)
			Button.MouseButton1Click:Connect(data.Callback)
		end

		function Tab:Toggle(data)
			local Toggle = Instance.new("TextButton", Page)
			Toggle.Size = UDim2.new(1, -10, 0, 35)
			Toggle.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
			Toggle.TextColor3 = Color3.fromRGB(255, 255, 255)
			Toggle.Font = Enum.Font.Gotham
			Toggle.TextSize = 16
			Toggle.Text = data.Title .. ": OFF"
			local state = false
			Toggle.MouseButton1Click:Connect(function()
				state = not state
				Toggle.Text = data.Title .. (state and ": ON" or ": OFF")
				data.Callback(state)
			end)
		end

		function Tab:Input(data)
			local Box = Instance.new("TextBox", Page)
			Box.Size = UDim2.new(1, -10, 0, 35)
			Box.PlaceholderText = data.Placeholder or "Enter text..."
			Box.Text = ""
			Box.Font = Enum.Font.Gotham
			Box.TextSize = 16
			Box.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
			Box.TextColor3 = Color3.fromRGB(255, 255, 255)
			Box.FocusLost:Connect(function()
				data.Callback(Box.Text)
			end)
		end

		function Tab:Dropdown(data)
			local Drop = Instance.new("TextButton", Page)
			Drop.Size = UDim2.new(1, -10, 0, 35)
			Drop.Text = data.Value or "Select..."
			Drop.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
			Drop.TextColor3 = Color3.fromRGB(255, 255, 255)
			Drop.Font = Enum.Font.Gotham
			Drop.TextSize = 16

			local ListFrame = Instance.new("Frame", Page)
			ListFrame.Size = UDim2.new(1, -10, 0, #data.Values * 30)
			ListFrame.Visible = false
			local layout = Instance.new("UIListLayout", ListFrame)

			for _, v in ipairs(data.Values) do
				local opt = Instance.new("TextButton", ListFrame)
				opt.Size = UDim2.new(1, 0, 0, 30)
				opt.Text = v
				opt.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
				opt.TextColor3 = Color3.fromRGB(255, 255, 255)
				opt.MouseButton1Click:Connect(function()
					Drop.Text = v
					ListFrame.Visible = false
					data.Callback(v)
				end)
			end

			Drop.MouseButton1Click:Connect(function()
				ListFrame.Visible = not ListFrame.Visible
			end)
		end

		function Tab:Keybind(data)
			local Button = Instance.new("TextButton", Page)
			Button.Size = UDim2.new(1, -10, 0, 35)
			Button.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
			Button.TextColor3 = Color3.fromRGB(255, 255, 255)
			Button.Font = Enum.Font.Gotham
			Button.TextSize = 16
			Button.Text = data.Title .. " [" .. data.Value .. "]"

			local waiting = false

			Button.MouseButton1Click:Connect(function()
				waiting = true
				Button.Text = "Press any key..."
			end)

			UserInputService.InputBegan:Connect(function(input, processed)
				if waiting and input.UserInputType == Enum.UserInputType.Keyboard then
					waiting = false
					Button.Text = data.Title .. " [" .. input.KeyCode.Name .. "]"
					data.Callback(input.KeyCode.Name)
				end
			end)
		end

		TabButton.MouseButton1Click:Connect(Tab.Show)

		table.insert(Window.Tabs, Tab)
		if #Window.Tabs == 1 then Tab:Show() end
		return Tab
	end

	return Window
end

return FunUI
